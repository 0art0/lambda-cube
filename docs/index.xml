<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>λ-cube</title>
    <link>https://0art0.github.io/lambda-cube/</link>
    <description>Recent content on λ-cube</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 Jan 2023 10:36:27 +0530</lastBuildDate><atom:link href="https://0art0.github.io/lambda-cube/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automata as covering spaces of graphs</title>
      <link>https://0art0.github.io/lambda-cube/posts/automata-as-covering-spaces/</link>
      <pubDate>Mon, 02 Jan 2023 10:36:27 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/automata-as-covering-spaces/</guid>
      <description>This post describes a way of viewing deterministic automata from a combinatorial and topological lens as covering spaces of certain graphs. Roughly, every word with a given set of symbols can be thought of as a path on a certain graph, and the execution of the automaton can be interpreted as path lifting. A quick search of the internet does not bring up anything related, but it is quite likely that this connection has already been made before.</description>
    </item>
    
    <item>
      <title>Towers of Hanoi</title>
      <link>https://0art0.github.io/lambda-cube/posts/towers-of-hanoi/</link>
      <pubDate>Wed, 02 Nov 2022 11:24:29 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/towers-of-hanoi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Combinatornithology</title>
      <link>https://0art0.github.io/lambda-cube/posts/combinatornithology/</link>
      <pubDate>Wed, 02 Nov 2022 11:24:10 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/combinatornithology/</guid>
      <description>Combinatory logic Combinatory logic is a simplified model of computation based on combinators - functions that take in other functions and combine them using only function application. It was introduced by Moses Schönfinkel and rediscovered by Haskell Curry. Interestingly, combinatory logic is free of variables - every combinator can be expressed in terms of just two special combinators known as $S$ and $K$. It is possible to encode natural numbers and intuitionistic propositional logic in the language of combinators.</description>
    </item>
    
    <item>
      <title>Solving equations in Abelian groups</title>
      <link>https://0art0.github.io/lambda-cube/posts/solving-equations-in-abelian-groups/</link>
      <pubDate>Sun, 18 Sep 2022 16:30:00 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/solving-equations-in-abelian-groups/</guid>
      <description>A general equality problem for Abelian groups Consider the problem of deciding whether of deciding whether an equation, such as
$$ (x + y) + z + -(x + z) = y$$
is true in all Abelian groups. This means that for any Abelian group $A$, and for any chosen values $x$, $y$ and $z$ in $A$, the equation should be true.
This hardly poses a problem, for humans atleast - by &amp;#34;expanding&amp;#34;, &amp;#34;cancelling&amp;#34;, &amp;#34;rearranging&amp;#34; and &amp;#34;grouping&amp;#34;, anyone well-versed in high-school algebra can solve an arbitrary instance of this problem without much thought.</description>
    </item>
    
    <item>
      <title>Formalising Gardam&#39;s disproof of Kaplansky&#39;s Unit Conjecture</title>
      <link>https://0art0.github.io/lambda-cube/posts/formalising-gardams-disproof-of-kaplanskys-unit-conjecture/</link>
      <pubDate>Wed, 08 Jun 2022 12:41:57 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/formalising-gardams-disproof-of-kaplanskys-unit-conjecture/</guid>
      <description>The Unit Conjecture The Unit Conjecture is a fundamental and well-known question about group rings that goes back to Graham Higman and Irving Kaplansky in the mid-twentieth century. It is a part of a collection of several conjectures posed by Kaplansky - most notably the Zero-divisor conjecture and the Idempotent conjecture. These are collectively known as Kaplansky&amp;#39;s conjectures.
The statement Consider a field $K$ and a group $G$. In the group ring $K[G]$, the elements of the form $k \cdot g$, where $k \in K \backslash \{0\}$ and $g \in G$, are clearly invertible - with the inverse being $k^{-1} \cdot g^{-1}$.</description>
    </item>
    
    <item>
      <title>A category-theoretic description of a group ring</title>
      <link>https://0art0.github.io/lambda-cube/posts/a-category-theoretic-definition-of-a-group-ring/</link>
      <pubDate>Tue, 26 Apr 2022 23:11:03 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/a-category-theoretic-definition-of-a-group-ring/</guid>
      <description>Introduction Mathematical objects can often be described in several ways, each description usually offering a different perspective and serving a different purpose.
For example, group rings - the subject of this post - can be described in two very different ways. Given a group G and a ring R, one way to think of the group ring R[G] is as the space of functions from G to R having finite support, with addition being pointwise and multiplication given by convolution.</description>
    </item>
    
    <item>
      <title>Implementing a function-finder tactic in Lean4</title>
      <link>https://0art0.github.io/lambda-cube/posts/function-finder-tactic/</link>
      <pubDate>Mon, 25 Apr 2022 10:22:24 +0530</pubDate>
      
      <guid>https://0art0.github.io/lambda-cube/posts/function-finder-tactic/</guid>
      <description>Introduction The Lean theorem prover is one of several that supports constructing proofs using tactics - commands that allow users to build up proofs step-by-step interactively at a high level of abstraction, usually interspersed with automation (for a demonstration of tactics and an introduction to Lean in general, consult the Natural Number Game). One of the appealing aspects of Lean, especially Lean4, is that there is a robust framework in place for users to write custom tactics within the language, making Lean its own metaprogramming language.</description>
    </item>
    
  </channel>
</rss>
